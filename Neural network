import numpy as np

# Sigmoid and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))
def sigmoid_derivative(x):
    return x * (1 - x)

# Input dataset (XOR)
X = np.array([
    [0, 0],
    [0, 1],
    [1, 0],
    [1, 1]
])

# Output labels (XOR)
y = np.array([[0], [1], [1], [0]])

# Seed for reproducibility
np.random.seed(1)

# Weights (2 input → 4 hidden → 1 output)
input_layer_neurons = X.shape[1]
hidden_neurons = 4
output_neurons = 1

# Weight initialization
wh = np.random.uniform(size=(input_layer_neurons, hidden_neurons))   # weights from input to hidden
bh = np.random.uniform(size=(1, hidden_neurons))                     # bias for hidden
wo = np.random.uniform(size=(hidden_neurons, output_neurons))        # weights from hidden to output
bo = np.random.uniform(size=(1, output_neurons))                     # bias for output

# Training
epochs = 10000
learning_rate = 0.1

for epoch in range(epochs):
    # Forward pass
    hidden_input = np.dot(X, wh) + bh
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, wo) + bo
    output = sigmoid(final_input)

    # Backpropagation
    error = y - output
    d_output = error * sigmoid_derivative(output)

    error_hidden = d_output.dot(wo.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)

    # Update weights and biases
    wo += hidden_output.T.dot(d_output) * learning_rate
    bo += np.sum(d_output, axis=0, keepdims=True) * learning_rate
    wh += X.T.dot(d_hidden) * learning_rate
    bh += np.sum(d_hidden, axis=0, keepdims=True) * learning_rate

# Final output
print("Final predictions:")
print(np.round(output, 2))
