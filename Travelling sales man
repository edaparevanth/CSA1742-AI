from itertools import permutations

def travelling_salesman(graph, start):
    vertices = list(graph.keys())
    vertices.remove(start)

    min_path = float('inf')
    best_route = []

    for perm in permutations(vertices):
        current_weight = 0
        current_path = [start] + list(perm) + [start]

        for i in range(len(current_path) - 1):
            frm = current_path[i]
            to = current_path[i + 1]
            current_weight += graph[frm][to]

        if current_weight < min_path:
            min_path = current_weight
            best_route = current_path

    print("Best Path:", " -> ".join(best_route))
    print("Minimum Cost:", min_path)

# Example weighted graph as adjacency matrix in dictionary form
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
}

# Start from node 'A'
travelling_salesman(graph, 'A')
