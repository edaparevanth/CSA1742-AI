import heapq


goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]


def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance

# Find position of 0
def find_zero(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate next possible moves
def get_neighbors(state):
    x, y = find_zero(state)
    directions = [(-1,0), (1,0), (0,-1), (0,1)]
    neighbors = []

    for dx, dy in directions:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)
    return neighbors


def is_goal(state):
    return state == goal_state


def solve_puzzle(start_state):
    visited = set()
    pq = []
    heapq.heappush(pq, (manhattan_distance(start_state), 0, start_state, []))

    while pq:
        est_cost, steps, current_state, path = heapq.heappop(pq)

        state_tuple = tuple(map(tuple, current_state))
        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        if is_goal(current_state):
            return path + [current_state]

        for neighbor in get_neighbors(current_state):
            if tuple(map(tuple, neighbor)) not in visited:
                heapq.heappush(pq, (steps + 1 + manhattan_distance(neighbor), steps + 1, neighbor, path + [current_state]))

    return None


def print_state(state):
    for row in state:
        print(" ".join(str(x) if x != 0 else " " for x in row))
    print()


if __name__ == "__main__":
    start = [
        [1, 2, 3],
        [4, 0, 6],
        [7, 5, 8]
    ]

    print("Initial State:")
    print_state(start)

    solution = solve_puzzle(start)

    if solution:
        print(f"Solved in {len(solution)-1} moves:")
        for step in solution:
            print_state(step)
    else:
        print("No solution found.")
