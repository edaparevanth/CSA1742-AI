from collections import deque

def is_valid(m_left, c_left, m_right, c_right):
    # No group can have negative members
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    # Missionaries cannot be outnumbered by cannibals
    if (m_left > 0 and m_left < c_left) or (m_right > 0 and m_right < c_right):
        return False
    return True

def get_successors(state):
    successors = []
    m_left, c_left, boat = state

    moves = [
        (1, 0), (2, 0),  # one or two missionaries
        (0, 1), (0, 2),  # one or two cannibals
        (1, 1)           # one missionary and one cannibal
    ]

    for m, c in moves:
        if boat == 1:  # boat on left side
            new_state = (m_left - m, c_left - c, 0)
            m_right = 3 - new_state[0]
            c_right = 3 - new_state[1]
        else:  # boat on right side
            new_state = (m_left + m, c_left + c, 1)
            m_right = 3 - new_state[0]
            c_right = 3 - new_state[1]

        if is_valid(new_state[0], new_state[1], m_right, c_right):
            successors.append(new_state)

    return successors

def solve():
    start = (3, 3, 1)  # All on left, boat on left
    goal = (0, 0, 0)   # All on right, boat on right

    queue = deque()
    queue.append((start, [start]))

    visited = set()

    while queue:
        state, path = queue.popleft()

        if state in visited:
            continue
        visited.add(state)

        if state == goal:
            print("Solution Path:")
            for s in path:
                print(f"Left -> M:{s[0]} C:{s[1]} | Boat: {'Left' if s[2]==1 else 'Right'}")
            return

        for next_state in get_successors(state):
            if next_state not in visited:
                queue.append((next_state, path + [next_state]))

    print("No solution found.")

# Run the program
solve()
